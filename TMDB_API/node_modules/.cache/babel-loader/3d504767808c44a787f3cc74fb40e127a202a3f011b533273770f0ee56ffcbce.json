{"ast":null,"code":"import { fetchPopfilm, rechercheFilm, pageSuiva, pagePrevi, rechercheTvs, rechercheTves } from \"./typeaction\";\nimport axios from \"axios\";\nconst api_key = process.env.REACT_APP_API_KEY;\nexport const fetchPopfilms = page => {\n  return async dispatch => {\n    const reponse = await axios.get(`https://api.themoviedb.org/3/trending/movie/day?api_key=${api_key}&page=${page}`);\n    dispatch({\n      type: fetchPopfilm,\n      payload: {\n        page,\n        film: reponse.data.results,\n        totalPage: reponse.data.total_pages\n      }\n    });\n  };\n};\nexport const rechercheFilms = (recherche, page) => {\n  return async dispatch => {\n    const reponse = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${api_key}&page=${page}&query=${recherche}`);\n    dispatch({\n      type: rechercheFilm,\n      payload: {\n        recherche,\n        page,\n        film: reponse.data.results,\n        totalPage: reponse.data.total_pages\n      }\n    });\n  };\n};\nexport const rechercheTv = page => {\n  return async dispatch => {\n    const reponse = await axios.get(`https://api.themoviedb.org/3/trending/tv/day?api_key=${api_key}&page=${page}`);\n    dispatch({\n      type: rechercheTvs,\n      payload: {\n        page,\n        tv: reponse.data.results,\n        totalPage: reponse.data.total_pages\n      }\n    });\n  };\n};\nexport const recherchesTv = (recherche, page) => {\n  return async dispatch => {\n    const reponse = await axios.get(`https://api.themoviedb.org/3/search/tv?api_key=${api_key}&page=${page}&query=${recherche}`);\n    dispatch({\n      type: rechercheTves,\n      payload: {\n        recherche,\n        page,\n        tv: reponse.data.results,\n        totalPage: reponse.data.total_pages\n      }\n    });\n  };\n};\nexport const pageSuiv = {\n  type: pageSuiva\n};\nexport const pagePrev = {\n  type: pagePrevi\n};","map":{"version":3,"names":["fetchPopfilm","rechercheFilm","pageSuiva","pagePrevi","rechercheTvs","rechercheTves","axios","api_key","process","env","REACT_APP_API_KEY","fetchPopfilms","page","dispatch","reponse","get","type","payload","film","data","results","totalPage","total_pages","rechercheFilms","recherche","rechercheTv","tv","recherchesTv","pageSuiv","pagePrev"],"sources":["C:/Users/Utilisateur/OneDrive/Desktop/MesProjets/TMDB_API/src/action.js"],"sourcesContent":["import {\r\n  fetchPopfilm,\r\n  rechercheFilm,\r\n  pageSuiva,\r\n  pagePrevi,\r\n  rechercheTvs,\r\n  rechercheTves,\r\n} from \"./typeaction\";\r\nimport axios from \"axios\";\r\n\r\nconst api_key = process.env.REACT_APP_API_KEY;\r\n\r\nexport const fetchPopfilms = (page) => {\r\n  return async (dispatch) => {\r\n    const reponse = await axios.get(\r\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${api_key}&page=${page}`\r\n    );\r\n    dispatch({\r\n      type: fetchPopfilm,\r\n      payload: { page, film: reponse.data.results, totalPage: reponse.data.total_pages  },\r\n    });\r\n  };\r\n};\r\nexport const rechercheFilms = (recherche, page) => {\r\n  return async (dispatch) => {\r\n    const reponse = await axios.get(\r\n      `https://api.themoviedb.org/3/search/movie?api_key=${api_key}&page=${page}&query=${recherche}`\r\n    );\r\n    dispatch({\r\n      type: rechercheFilm,\r\n      payload: { recherche, page, film: reponse.data.results, totalPage: reponse.data.total_pages  },\r\n    });\r\n  };\r\n};\r\nexport const rechercheTv = (page) => {\r\n  return async (dispatch) => {\r\n    const reponse = await axios.get(\r\n      `https://api.themoviedb.org/3/trending/tv/day?api_key=${api_key}&page=${page}`\r\n    );\r\n    dispatch({\r\n      type: rechercheTvs,\r\n      payload: { page, tv: reponse.data.results, totalPage: reponse.data.total_pages  },\r\n    });\r\n  };\r\n};\r\nexport const recherchesTv = (recherche,page) => {\r\n  return async (dispatch) => {\r\n    const reponse = await axios.get(\r\n      `https://api.themoviedb.org/3/search/tv?api_key=${api_key}&page=${page}&query=${recherche}`\r\n    );\r\n    dispatch({\r\n      type: rechercheTves,\r\n      \r\n      payload: { recherche, page, tv: reponse.data.results, totalPage: reponse.data.total_pages },\r\n    });\r\n  };\r\n};\r\n\r\n\r\nexport const pageSuiv = {type:pageSuiva};\r\nexport const pagePrev = {type:pagePrevi};\r\n\r\n"],"mappings":"AAAA,SACEA,YAAY,EACZC,aAAa,EACbC,SAAS,EACTC,SAAS,EACTC,YAAY,EACZC,aAAa,QACR,cAAc;AACrB,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,OAAO,MAAMC,aAAa,GAAIC,IAAI,IAAK;EACrC,OAAO,MAAOC,QAAQ,IAAK;IACzB,MAAMC,OAAO,GAAG,MAAMR,KAAK,CAACS,GAAG,CAC5B,2DAA0DR,OAAQ,SAAQK,IAAK,EAClF,CAAC;IACDC,QAAQ,CAAC;MACPG,IAAI,EAAEhB,YAAY;MAClBiB,OAAO,EAAE;QAAEL,IAAI;QAAEM,IAAI,EAAEJ,OAAO,CAACK,IAAI,CAACC,OAAO;QAAEC,SAAS,EAAEP,OAAO,CAACK,IAAI,CAACG;MAAa;IACpF,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AACD,OAAO,MAAMC,cAAc,GAAGA,CAACC,SAAS,EAAEZ,IAAI,KAAK;EACjD,OAAO,MAAOC,QAAQ,IAAK;IACzB,MAAMC,OAAO,GAAG,MAAMR,KAAK,CAACS,GAAG,CAC5B,qDAAoDR,OAAQ,SAAQK,IAAK,UAASY,SAAU,EAC/F,CAAC;IACDX,QAAQ,CAAC;MACPG,IAAI,EAAEf,aAAa;MACnBgB,OAAO,EAAE;QAAEO,SAAS;QAAEZ,IAAI;QAAEM,IAAI,EAAEJ,OAAO,CAACK,IAAI,CAACC,OAAO;QAAEC,SAAS,EAAEP,OAAO,CAACK,IAAI,CAACG;MAAa;IAC/F,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AACD,OAAO,MAAMG,WAAW,GAAIb,IAAI,IAAK;EACnC,OAAO,MAAOC,QAAQ,IAAK;IACzB,MAAMC,OAAO,GAAG,MAAMR,KAAK,CAACS,GAAG,CAC5B,wDAAuDR,OAAQ,SAAQK,IAAK,EAC/E,CAAC;IACDC,QAAQ,CAAC;MACPG,IAAI,EAAEZ,YAAY;MAClBa,OAAO,EAAE;QAAEL,IAAI;QAAEc,EAAE,EAAEZ,OAAO,CAACK,IAAI,CAACC,OAAO;QAAEC,SAAS,EAAEP,OAAO,CAACK,IAAI,CAACG;MAAa;IAClF,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AACD,OAAO,MAAMK,YAAY,GAAGA,CAACH,SAAS,EAACZ,IAAI,KAAK;EAC9C,OAAO,MAAOC,QAAQ,IAAK;IACzB,MAAMC,OAAO,GAAG,MAAMR,KAAK,CAACS,GAAG,CAC5B,kDAAiDR,OAAQ,SAAQK,IAAK,UAASY,SAAU,EAC5F,CAAC;IACDX,QAAQ,CAAC;MACPG,IAAI,EAAEX,aAAa;MAEnBY,OAAO,EAAE;QAAEO,SAAS;QAAEZ,IAAI;QAAEc,EAAE,EAAEZ,OAAO,CAACK,IAAI,CAACC,OAAO;QAAEC,SAAS,EAAEP,OAAO,CAACK,IAAI,CAACG;MAAY;IAC5F,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AAGD,OAAO,MAAMM,QAAQ,GAAG;EAACZ,IAAI,EAACd;AAAS,CAAC;AACxC,OAAO,MAAM2B,QAAQ,GAAG;EAACb,IAAI,EAACb;AAAS,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}